// Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.
// Note: A palindrome string is a string that reads the same backward as forward.

// Input: s = “aab”
// Output: [ ["a","a","b"], ["aa","b"] ]	

// Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

#include <bits/stdc++.h>
using namespace std;

bool isPalindrome(string &s, int start, int end){
    while(start <= end){
        if(s[start++] != s[end--]){
            return false;
        }
    }
    return true;
}

void fun(int ind, string s, vector < string > & ds, vector < vector < string > > & ans) {
    if (ind == s.size()) {
      ans.push_back(ds);
      return;
    }
    for (int i = ind; i < s.size(); ++i) {
      if (isPalindrome(s, ind, i)) {
        ds.push_back(s.substr(ind, i - ind + 1));
        fun(i + 1, s, ds, ans);
        ds.pop_back();
      }
    }
  }

  int main(){
    vector<vector<string>> ans;
    vector<string> ds;
    string s = "aabb";

    fun(0, s, ds, ans);

    for(auto x: ans){
        for(auto i: x){
            cout << i << " ";
        }
        cout << endl;
    }

    return 0;
  }